{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport UserStore from '../UserStore';\nimport storage from 'redux-persist/lib/storage';\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport thunk from 'redux-thunk';\nconst reducers = combineReducers({\n  user: UserStore\n});\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst persistedReducer = persistReducer(persistConfig, reducers);\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: [thunk]\n});\n\nconst appReducer = (state, action) => {\n  if (action.type === 'CLEAR_DATA') {\n    state = undefined;\n  }\n\n  return reducers(state, action);\n};\n\nexport default appReducer;","map":{"version":3,"sources":["/home/user/test-project/client/src/redux/store.js"],"names":["configureStore","UserStore","storage","combineReducers","persistReducer","thunk","reducers","user","persistConfig","key","persistedReducer","store","reducer","middleware","appReducer","state","action","type","undefined"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAGA,MAAMC,QAAQ,GAAGH,eAAe,CAAC;AAC7BI,EAAAA,IAAI,EAAEN;AADuB,CAAD,CAAhC;AAIA,MAAMO,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBP,EAAAA;AAFkB,CAAtB;AAKA,MAAMQ,gBAAgB,GAAGN,cAAc,CAACI,aAAD,EAAgBF,QAAhB,CAAvC;AAEA,MAAMK,KAAK,GAAGX,cAAc,CAAC;AACzBY,EAAAA,OAAO,EAAEF,gBADgB;AAEzBG,EAAAA,UAAU,EAAE,CAACR,KAAD;AAFa,CAAD,CAA5B;;AAKE,MAAMS,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChCF,IAAAA,KAAK,GAAGG,SAAR;AACD;;AAED,SAAOZ,QAAQ,CAACS,KAAD,EAAQC,MAAR,CAAf;AACD,CAND;;AAQA,eAAeF,UAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport UserStore from '../UserStore';\n\nimport storage from 'redux-persist/lib/storage';\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport thunk from 'redux-thunk';\n\n\nconst reducers = combineReducers({\n    user: UserStore,\n});\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nconst store = configureStore({\n    reducer: persistedReducer,\n    middleware: [thunk],\n  });\n  \n  const appReducer = (state, action) => {\n    if (action.type === 'CLEAR_DATA') {\n      state = undefined\n    }\n  \n    return reducers(state, action)\n  }\n  \n  export default appReducer"]},"metadata":{},"sourceType":"module"}